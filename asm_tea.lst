


ARM Macro Assembler    Page 1 


    1 00000000         ; TEA encryption and decryption implemented in assembly
    2 00000000         
    3 00000000                 AREA             ASM_TEA, CODE, READONLY
    4 00000000         
    5 00000000                 EXPORT           ASM_TEA_ENCRYPT
    6 00000000                 EXPORT           ASM_TEA_DECRYPT
    7 00000000                 EXPORT           ASM_TEA_ENCRYPT_STRING
    8 00000000                 EXPORT           ASM_TEA_DECRYPT_STRING
    9 00000000         
   10 00000000         ;
   11 00000000         ; ENCRYPT/DECRYPT 64b LOOP
   12 00000000         ;
   13 00000000         ; PARAMETERS
   14 00000000         ; R0  &KEY (128-bit)
   15 00000000         ; R1  &VALUE (64-bit)
   16 00000000         ;
   17 00000000         ; RETURN
   18 00000000         ; R0-R1 VALUE (64-bit)
   19 00000000         ;
   20 00000000         ; REGISTER MAP
   21 00000000         ; R0  D0
   22 00000000         ; R1  D1
   23 00000000         ; R2  SUM
   24 00000000         ; R3  DELTA
   25 00000000         ; R4  COUNTER
   26 00000000         ; R5  T1
   27 00000000         ; R6  T2
   28 00000000         ; R7  T3
   29 00000000         ; R8  T4
   30 00000000         ; R9  KEY0
   31 00000000         ; R10  KEY1
   32 00000000         ; R11  KEY2
   33 00000000         ; R12  KEY3
   34 00000000         
   35 00000000 E92D 1FF0 
                       ASM_TEA_ENCRYPT
                               PUSH             {R4-R12}    ;Save previous regi
                                                            ster states
   36 00000004         
   37 00000004 4B43            LDR              R3, =0x9E3779B9 ;Load DELTA
   38 00000006 E890 1E00       LDM              R0, {R9-R12} 
                                                            ;Load KEY parameter
                                                            
   39 0000000A C903            LDM              R1, {R0-R1} ;Load DATA paramete
                                                            r
   40 0000000C F04F 0420       MOV              R4, #32     ;Initialize COUNTER
                                                            
   41 00000010 F04F 0200       LDR              R2, =0      ;Initialize SUM
   42 00000014         
   43 00000014         
   44 00000014 441A    ENCRYPTLOOP
                               ADD              R2, R2, R3  ;Increment SUM by D
                                                            ELTA
   45 00000016         
   46 00000016 EA4F 1501       LSL              R5, R1, #4  ;Calculate T1
   47 0000001A 444D            ADD              R5, R5, R9
   48 0000001C         
   49 0000001C EA4F 1651       LSR              R6, R1, #5  ;Calculate T2
   50 00000020 4456            ADD              R6, R6, R10



ARM Macro Assembler    Page 2 


   51 00000022         
   52 00000022 EB01 0702       ADD              R7, R1, R2  ;Calculate T3
   53 00000026         
   54 00000026 EA85 0806       EOR              R8, R5, R6  ;Calculate T4
   55 0000002A EA88 0807       EOR              R8, R8, R7
   56 0000002E         
   57 0000002E 4440            ADD              R0, R0, R8  ;Calculate D0   
   58 00000030         
   59 00000030 EA4F 1500       LSL              R5, R0, #4  ;Calculate T1    
   60 00000034 445D            ADD              R5, R5, R11
   61 00000036         
   62 00000036 EA4F 1650       LSR              R6, R0, #5  ;Calculate T2
   63 0000003A 4466            ADD              R6, R6, R12
   64 0000003C         
   65 0000003C EB00 0702       ADD              R7, R0, R2  ;Calculate T3
   66 00000040         
   67 00000040 EA85 0806       EOR              R8, R5, R6  ;Calculate T4
   68 00000044 EA88 0807       EOR              R8, R8, R7
   69 00000048         
   70 00000048 4441            ADD              R1, R1, R8  ;Calculate D1
   71 0000004A         
   72 0000004A F1A4 0401       SUB              R4, R4, #1  ;Check if we're don
                                                            e all iterations
   73 0000004E 2C00            CMP              R4, #0
   74 00000050 D1E0            BNE              ENCRYPTLOOP
   75 00000052         
   76 00000052 E8BD 1FF0       POP              {R4-R12}    ;Restore previous r
                                                            egister states
   77 00000056 4770            BX               LR          ;Return
   78 00000058         
   79 00000058         
   80 00000058 E92D 1FF0 
                       ASM_TEA_DECRYPT
                               PUSH             {R4-R12}    ;Save previous regi
                                                            ster states
   81 0000005C         
   82 0000005C 4B2D            LDR              R3, =0x9E3779B9 ;Load DELTA
   83 0000005E E890 1E00       LDM              R0, {R9-R12} 
                                                            ;Load KEY parameter
                                                            
   84 00000062 C903            LDM              R1, {R0-R1} ;Load DATA paramete
                                                            r
   85 00000064 F04F 0420       MOV              R4, #32     ;Initialize COUNTER
                                                            
   86 00000068 4A2B            LDR              R2, =0xC6EF3720 ;Initialize SUM
                                                            
   87 0000006A         
   88 0000006A         
   89 0000006A EA4F 1500 
                       DECRYPTLOOP
                               LSL              R5, R0, #4  ;Calculate T1
   90 0000006E 445D            ADD              R5, R5, R11
   91 00000070         
   92 00000070 EA4F 1650       LSR              R6, R0, #5  ;Calculate T2
   93 00000074 4466            ADD              R6, R6, R12
   94 00000076         
   95 00000076 EB00 0702       ADD              R7, R0, R2  ;Calculate T3
   96 0000007A         
   97 0000007A EA85 0806       EOR              R8, R5, R6  ;Calculate T4



ARM Macro Assembler    Page 3 


   98 0000007E EA88 0807       EOR              R8, R8, R7
   99 00000082         
  100 00000082 EBA1 0108       SUB              R1, R1, R8  ;Calculate D0   
  101 00000086         
  102 00000086 EA4F 1501       LSL              R5, R1, #4  ;Calculate T1   
  103 0000008A 444D            ADD              R5, R5, R9
  104 0000008C         
  105 0000008C EA4F 1651       LSR              R6, R1, #5  ;Calculate T2
  106 00000090 4456            ADD              R6, R6, R10
  107 00000092         
  108 00000092 EB01 0702       ADD              R7, R1, R2  ;Calculate T3
  109 00000096         
  110 00000096 EA85 0806       EOR              R8, R5, R6  ;Calculate T4
  111 0000009A EA88 0807       EOR              R8, R8, R7
  112 0000009E         
  113 0000009E EBA0 0008       SUB              R0, R0, R8  ;Calculate D1
  114 000000A2         
  115 000000A2 EBA2 0203       SUB              R2, R2, R3  ;Decrement SUM by D
                                                            ELTA
  116 000000A6         
  117 000000A6 F1A4 0401       SUB              R4, R4, #1  ;Check if we're don
                                                            e all iterations
  118 000000AA 2C00            CMP              R4, #0
  119 000000AC D1DD            BNE              DECRYPTLOOP
  120 000000AE         
  121 000000AE E8BD 1FF0       POP              {R4-R12}    ;Restore previous r
                                                            egister states
  122 000000B2 4770            BX               LR          ;Return
  123 000000B4         
  124 000000B4         
  125 000000B4         ;
  126 000000B4         ; ENCRYPT/DECRYPT STRING OF ARBITRARY LENGTH
  127 000000B4         ;
  128 000000B4         ; PARAMETERS
  129 000000B4         ; R0  &KEY (128-bit)
  130 000000B4         ; R1  &VALUE (64-bit)
  131 000000B4         ; R2  LENGTH
  132 000000B4         ;
  133 000000B4         ; RETURN
  134 000000B4         ; R0  &RESULT (64-bit)
  135 000000B4         ;
  136 000000B4         ; REGISTER MAP
  137 000000B4         ; R0  
  138 000000B4         ; R1  
  139 000000B4         ; R2  
  140 000000B4         ; R3  &DATA piece being (en/de)crypted
  141 000000B4         ; R4  COUNTER
  142 000000B4         ; R5  &KEY
  143 000000B4         ; R6  &DATA
  144 000000B4         ; R7  LENGTH
  145 000000B4         ; R8  &RESULT
  146 000000B4         ; R9  
  147 000000B4         ; R10  
  148 000000B4         ; R11  
  149 000000B4         
  150 000000B4 E92D 5FF0 
                       ASM_TEA_ENCRYPT_STRING
                               PUSH             {R4-R12,R14} ;Save previous reg
                                                            ister states



ARM Macro Assembler    Page 4 


  151 000000B8 F04F 0400       LDR              R4, =0      ;Initialize counter
                                                            
  152 000000BC 4605            MOV              R5, R0      ;Store parameter &K
                                                            EY in register
  153 000000BE 460E            MOV              R6, R1      ;Store parameter &D
                                                            ATA in register
  154 000000C0 4617            MOV              R7, R2      ;Store parameter LE
                                                            NGTH in register
  155 000000C2         ;LDR R8, =0x20001000   ;Define memory location for encry
                       pted string
  156 000000C2         
  157 000000C2 4628    ENCRYPT_ITERATE
                               MOV              R0, R5      ;Move &KEY into par
                                                            ameter register
  158 000000C4 EB06 0104       ADD              R1, R6, R4  ;Add offset to &DAT
                                                            A and move into par
                                                            ameter register
  159 000000C8         
  160 000000C8 F7FF FFFE       BL               ASM_TEA_ENCRYPT ;Encrypt 64b of
                                                             DATA
  161 000000CC EB04 0306       ADD              R3, R4, R6  ;Calculate location
                                                             to store this piec
                                                            e of encrypted DATA
                                                             in
  162 000000D0 E883 0003       STM              R3, {R0-R1} ;Store this 64b of 
                                                            enrypted DATA in re
                                                            sult memory area
  163 000000D4         
  164 000000D4 F104 0408       ADD              R4, R4, #0x8 
                                                            ;Incrememnt counter
                                                            
  165 000000D8 42BC            CMP              R4, R7      ;Compare counter to
                                                             length of string
  166 000000DA DBF2            BLT              ENCRYPT_ITERATE ;Repeat encrypt
                                                             loop if we haven't
                                                             reached the end
  167 000000DC         
  168 000000DC 4630            MOV              R0, R6      ;Move result pointe
                                                            r into return regis
                                                            ter
  169 000000DE E8BD 5FF0       POP              {R4-R12,R14} ;Restore previous 
                                                            register states
  170 000000E2 4770            BX               LR          ;Return
  171 000000E4         
  172 000000E4         
  173 000000E4 E92D 5FF0 
                       ASM_TEA_DECRYPT_STRING
                               PUSH             {R4-R12,R14} ;Save previous reg
                                                            ister states
  174 000000E8 F04F 0400       LDR              R4, =0      ;Initialize counter
                                                            
  175 000000EC 4605            MOV              R5, R0      ;Store parameter &K
                                                            EY in register
  176 000000EE 460E            MOV              R6, R1      ;Store parameter &D
                                                            ATA in register
  177 000000F0 4617            MOV              R7, R2      ;Store parameter LE
                                                            NGTH in register
  178 000000F2         ;LDR R8, =0x20002000   ;Define memory location for decry
                       pted string



ARM Macro Assembler    Page 5 


  179 000000F2         
  180 000000F2 4628    DECRYPT_ITERATE
                               MOV              R0, R5      ;Move &KEY into par
                                                            ameter register
  181 000000F4 EB06 0104       ADD              R1, R6, R4  ;Add offset to &DAT
                                                            A and move into par
                                                            ameter register
  182 000000F8         
  183 000000F8 F7FF FFFE       BL               ASM_TEA_DECRYPT ;Decrypt 64b of
                                                             DATA
  184 000000FC EB04 0306       ADD              R3, R4, R6  ;Calculate location
                                                             to store this piec
                                                            e of decrypted DATA
                                                             in
  185 00000100 E883 0003       STM              R3, {R0-R1} ;Store this 64b of 
                                                            encrypted DATA in r
                                                            esult memory area
  186 00000104         
  187 00000104 F104 0408       ADD              R4, R4, #0x8 ;Increment counter
                                                            
  188 00000108 42A7            CMP              R7, R4      ;Compare counter to
                                                             length of string
  189 0000010A D1F2            BNE              DECRYPT_ITERATE ;Repeate decryp
                                                            t loop if we haven'
                                                            t reached the end
  190 0000010C         
  191 0000010C 4630            MOV              R0, R6      ;Move result pointe
                                                            r into return regis
                                                            ter
  192 0000010E E8BD 5FF0       POP              {R4-R12,R14} ;Restore previous 
                                                            register states
  193 00000112 4770            BX               LR          ;Return
  194 00000114                 ALIGN
  195 00000114                 END
              9E3779B9 
              C6EF3720 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\asm
_tea.d -o.\asm_tea.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Ke
il\ARM\Inc\ST\STM32F4xx --predefine="__EVAL SETA 1" --list=.\asm_tea.lst ASM_TE
A.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ASM_TEA 00000000

Symbol: ASM_TEA
   Definitions
      At line 3 in file ASM_TEA.s
   Uses
      None
Comment: ASM_TEA unused
ASM_TEA_DECRYPT 00000058

Symbol: ASM_TEA_DECRYPT
   Definitions
      At line 80 in file ASM_TEA.s
   Uses
      At line 6 in file ASM_TEA.s
      At line 183 in file ASM_TEA.s

ASM_TEA_DECRYPT_STRING 000000E4

Symbol: ASM_TEA_DECRYPT_STRING
   Definitions
      At line 173 in file ASM_TEA.s
   Uses
      At line 8 in file ASM_TEA.s
Comment: ASM_TEA_DECRYPT_STRING used once
ASM_TEA_ENCRYPT 00000000

Symbol: ASM_TEA_ENCRYPT
   Definitions
      At line 35 in file ASM_TEA.s
   Uses
      At line 5 in file ASM_TEA.s
      At line 160 in file ASM_TEA.s

ASM_TEA_ENCRYPT_STRING 000000B4

Symbol: ASM_TEA_ENCRYPT_STRING
   Definitions
      At line 150 in file ASM_TEA.s
   Uses
      At line 7 in file ASM_TEA.s
Comment: ASM_TEA_ENCRYPT_STRING used once
DECRYPTLOOP 0000006A

Symbol: DECRYPTLOOP
   Definitions
      At line 89 in file ASM_TEA.s
   Uses
      At line 119 in file ASM_TEA.s
Comment: DECRYPTLOOP used once
DECRYPT_ITERATE 000000F2

Symbol: DECRYPT_ITERATE
   Definitions
      At line 180 in file ASM_TEA.s
   Uses
      At line 189 in file ASM_TEA.s
Comment: DECRYPT_ITERATE used once
ENCRYPTLOOP 00000014



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: ENCRYPTLOOP
   Definitions
      At line 44 in file ASM_TEA.s
   Uses
      At line 74 in file ASM_TEA.s
Comment: ENCRYPTLOOP used once
ENCRYPT_ITERATE 000000C2

Symbol: ENCRYPT_ITERATE
   Definitions
      At line 157 in file ASM_TEA.s
   Uses
      At line 166 in file ASM_TEA.s
Comment: ENCRYPT_ITERATE used once
9 symbols
343 symbols in table
